Translate SQL Query to ES DSL Query with Matching Attribute Names.
You should return a json, including two parts: first the query, then the "index". The index should correspond to the "table" in SQL and map to the "inner_index" field.
Notice, in ES syntax, if there are aggregation functions, then you need to set "size" to 0 to neglect original documents and only return aggregation results. Show as Example 2.

Example 1:
SQL: SELECT zip_code FROM weather WHERE mean_visibility_miles  <  10
ES Query: 
{
    "query": {
    "bool": {
        "filter": [
        {
            "range": {
            "mean_visibility_miles": {
                "lt": 10
            }
            }
        }
        ]
    }
    },
    "_source": ["zip_code"],
    "inner_index": "weather"
}

Example 2:
SQL: SELECT city ,  max(lat) FROM station GROUP BY city
ES query:
query = {
  "size": 0,
  "aggs": {
    "group_by_city": {
      "terms": {
        "field": "city.keyword"
      },
      "aggs": {
        "max_latitude": {
          "max": {
            "field": "lat"
          }
        }
      }
    }
  }
}


+++++++++
SQL: {{$sql}}
Neo4j Query:
