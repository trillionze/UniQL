Translate the following query SQL query to MongoDB Query. Such MongoDB query should act as parameter in "db.users.find()".
When doing the conversion, there are some rules:
1. You should keep the query returned in one line, do not include '\n' in the beginning adn end in your response.
2. When handling floating-point numbers, truncate to 4 decimal places.
3. For SQL aggregation functions, link the operation and field with an underscore. For instance, convert max(score) in SQL to max_score in MongoDB.
4. In the case of SQL joins, where fields are referenced as Table.Field, replace the period (.) with an underscore (_) to form Table_Field in the MongoDB query. For example, "student.score" in SQL query to "student_score" in MongoDB query.
5. Do not use _id as returned field. Instead, use the original field name. As example 3 shows.
6. Use None to replace null

---------------------------------------------------------------------------
Here are some knowledge you may need. Notice, it is for reference only. Maybe something within is incomplete or truncated.
{{$knowledge}}

---------------------------------------------------------------------------
Example 1:
SQL: SELECT max_humidity FROM weather WHERE max_humidity >= 90 LIMIT 10
MongoDB Query: db.weather.find({ "max_humidity": { "$gte": 90 } },{ "max_humidity": 1, "_id": 0 }).limit(10)

Example 2:
SQL: SELECT avg(longitude) FROM station WHERE city  =  "San Jose"
MongoDB Query: db.station.aggregate([{"$match": {"city": "San Jose"}}, {"$group": {"_id": None, "avg_longitude": {"$avg": "$longitude"}}}])

Example 3:
SQL: SELECT city ,  max(lat) FROM station GROUP BY city
MongDB Query: 
db.station.aggregate([{"$group": {"_id": "$city", "max_lat": {"$max": "$lat"}}},{"$project": {"_id": 0, "city": "$_id", "max_lat": 1}}])

{{$examples}}

---------------------------------------------------------------------------
SQL: {{$sql}}
MongoDB Query:

