
--------------------------0-----------------
**********************SQL Query: SELECT date FROM weather WHERE max_temperature_f  >  85**************************
['date']
**********************MongoDB Query: db.weather.find({ "max_temperature_f": { "$gt": 85 } },{ "date": 1, "_id": 0 })**************************
translate SELECT date FROM weather WHERE max_temperature_f  >  85 success

--------------------------1-----------------
**********************SQL Query: SELECT name FROM station WHERE lat  <  37.5**************************
['name']
Error parsing XML of prompt: not well-formed (invalid token): line 23, column 42
**********************MongoDB Query: db.station.find({ "lat": { "$lt": 37.5 } },{ "name": 1, "_id": 0 })**************************
translate SELECT name FROM station WHERE lat  <  37.5 success

--------------------------2-----------------
**********************SQL Query: SELECT city ,  max(lat) FROM station GROUP BY city**************************
['city', 'max_lat']
**********************MongoDB Query: db.station.aggregate([{"$group": {"_id": "$city", "max_lat": {"$max": "$lat"}}},{"$project": {"_id": 0, "city": "$_id", "max_lat": 1}}])**************************
translate SELECT city ,  max(lat) FROM station GROUP BY city success

--------------------------3-----------------
**********************SQL Query: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3**************************
['start_station_name', 'end_station_name']
**********************MongoDB Query: db.trip.find({}, {"start_station_name": 1, "end_station_name": 1, "_id": 0}).sort({"id": 1}).limit(3)**************************
translate SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3 success

--------------------------4-----------------
**********************SQL Query: SELECT avg(lat) ,  avg(longitude) FROM station WHERE city  =  "San Jose"**************************
['avg_lat', 'avg_longitude']
**********************MongoDB Query: db.station.aggregate([{"$match": {"city": "San Jose"}}, {"$group": {"_id": None, "avg_lat": {"$avg": "$lat"}, "avg_longitude": {"$avg": "$longitude"}}},{"$project": {"_id": 0, "avg_lat": 1, "avg_longitude": 1}}])**************************
SELECT avg(lat) ,  avg(longitude) FROM station WHERE city  =  "San Jose"
None
mysql res: ['{"avg_lat": 37.0000, "avg_longitude": -122.0000}']
mongo res: ['{"avg_lat": 37.0, "avg_longitude": -122.0}']

--------------------------5-----------------
**********************SQL Query: SELECT id FROM trip ORDER BY duration LIMIT 1**************************
['id']
**********************MongoDB Query: db.trip.find({}, {"id": 1, "_id": 0}).sort({"duration": 1}).limit(1)**************************
translate SELECT id FROM trip ORDER BY duration LIMIT 1 success

--------------------------6-----------------
**********************SQL Query: SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636**************************
['sum_duration', 'max_duration']
**********************MongoDB Query: db.trip.aggregate([{"$match": {"bike_id": 636}}, {"$group": {"_id": None, "sum_duration": {"$sum": "$duration"}, "max_duration": {"$max": "$duration"}}}])**************************
translate SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636 success

--------------------------7-----------------
**********************SQL Query: SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code**************************
['zip_code', 'avg_mean_temperature_f']
**********************MongoDB Query: db.weather.aggregate([{"$match": {"date": {"$regex": "^8/"} }}, {"$group": {"_id": "$zip_code", "avg_mean_temperature_f": {"$avg": "$mean_temperature_f"}}}, {"$project": {"_id": 0, "zip_code": "$_id", "avg_mean_temperature_f": {"$round": ["$avg_mean_temperature_f", 4]}} }])**************************
translate SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code success

--------------------------8-----------------
**********************SQL Query: SELECT count(DISTINCT bike_id) FROM trip**************************
['count_DISTINCT bike_id']
**********************MongoDB Query: db.trip.aggregate([{"$group": {"_id": null, "count_distinct_bike_id": {"$addToSet": "$bike_id"}}},{"$project": {"_id": 0, "count_distinct_bike_id": {"$size": "$count_distinct_bike_id"}}}])**************************
execute mongo query error:name 'null' is not defined

--------------------------9-----------------
**********************SQL Query: SELECT count(DISTINCT city) FROM station**************************
['count_DISTINCT city']
**********************MongoDB Query: db.station.aggregate([{"$group": {"_id": null, "count_city": {"$addToSet": "$city"}}},{"$project": {"_id": 0, "count_city": {"$size": "$count_city"}}}])**************************
execute mongo query error:name 'null' is not defined

--------------------------10-----------------
**********************SQL Query: SELECT COUNT(*) FROM station WHERE city  =  "Mountain View"**************************
['COUNT_*']
**********************MongoDB Query: db.station.find({"city": "Mountain View"}).count()**************************
execute mongo query error:'Cursor' object has no attribute 'count'

--------------------------11-----------------
**********************SQL Query: SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7**************************
['name']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "joined"}}, {"$unwind": "$joined"}, {"$match": {"joined.bikes_available": 7}}, {"$project": {"_id": 0, "name": "$name"}}])**************************
Error comparing: Row number mismatch

--------------------------12-----------------
**********************SQL Query: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE "8/%" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1**************************
(None, OperationalError(1055, "Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'bike_1.trip.start_station_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by"))
execute mysql query error:(1055, "Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'bike_1.trip.start_station_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by")

--------------------------12-----------------
**********************SQL Query: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1**************************
['bike_id']
**********************MongoDB Query: db.trip.aggregate([{"$match": {"zip_code": 94002}}, {"$group": {"_id": "$bike_id", "count": {"$sum": 1}}, {"$sort": {"count": -1}}, {"$limit": 1}, {"$project": {"_id": 0, "bike_id": "$_id"}}])**************************
execute mongo query error:closing parenthesis ']' does not match opening parenthesis '{' (<string>, line 1)

--------------------------13-----------------
**********************SQL Query: SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8**************************
['COUNT_*']
**********************MongoDB Query: db.weather.find({ "mean_humidity": { "$gt": 50 }, "mean_visibility_miles": { "$gt": 8 } },{ "_id": 0 }).count()**************************
execute mongo query error:'Cursor' object has no attribute 'count'

--------------------------14-----------------
**********************SQL Query: SELECT T1.lat ,  T1.longitude ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1**************************
['lat', 'longitude', 'city']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "trip", "localField": "id", "foreignField": "start_station_id", "as": "trip_data"}}, {"$unwind": "$trip_data"}, {"$sort": {"trip_data.duration": 1}}, {"$limit": 1}, {"$project": {"_id": 0, "lat": "$lat", "longitude": "$longitude", "city": "$city"}}])**************************
translate SELECT T1.lat ,  T1.longitude ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1 success

--------------------------15-----------------
**********************SQL Query: SELECT id FROM station WHERE city  =  "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10**************************
['id']
**********************MongoDB Query: db.station.find({ "city": "San Francisco" }).intersect(db.status.aggregate([{"$group": {"_id": "$station_id", "avg_bikes_available": {"$avg": "$bikes_available"}}},{"$match": {"avg_bikes_available": {"$gt": 10}}}]))**************************
execute mongo query error:'Cursor' object has no attribute 'intersect'

--------------------------16-----------------
**********************SQL Query: SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE "12/%"**************************
['name', 'id']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status_info"}}, {"$unwind": "$status_info"}, {"$group": {"_id": "$status_info.station_id", "avg_bikes_available": {"$avg": "$status_info.bikes_available"}, "name": {"$first": "$name", "id": {"$first": "$id"}}}}, {"$match": {"avg_bikes_available": {"$gt": 14}}}, {"$project": {"_id": 0, "name": 1, "id": 1}}, {"$sort": {"name": 1}}, {"$limit": 10}, {"$facet": {"union_results": [{"$match": {"installation_date": {"$regex": "^12/"}}, {"$project": {"_id": 0, "name": 1, "id": 1}}}]}}])**************************
execute mongo query error:':' expected after dictionary key (<string>, line 1)

--------------------------17-----------------
**********************SQL Query: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3**************************
(None, ProgrammingError(1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) DESC LIMIT 3' at line 1"))
execute mysql query error:(1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '*) DESC LIMIT 3' at line 1")

--------------------------17-----------------
**********************SQL Query: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1**************************
['zip_code']
**********************MongoDB Query: db.weather.aggregate([{"$group": {"_id": "$zip_code", "avg_mean_sea_level_pressure_inches": {"$avg": "$mean_sea_level_pressure_inches"}}},{"$sort": {"avg_mean_sea_level_pressure_inches": 1}},{"$limit": 1},{"$project": {"_id": 0, "zip_code": "$_id"}}])**************************
translate SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1 success

--------------------------18-----------------
**********************SQL Query: SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  "Palo Alto")**************************
['avg_bikes_available']
**********************MongoDB Query: db.status.aggregate([{"$lookup": {"from": "station", "localField": "station_id", "foreignField": "id", "as": "station_info"}}, {"$match": {"station_info.city": {"$ne": "Palo Alto"}}}, {"$group": {"_id": None, "avg_bikes_available": {"$avg": "$bikes_available"}}}])**************************
SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  "Palo Alto")
None
mysql res: ['{"avg_bikes_available": 7.6579}']
mongo res: ['{"avg_bikes_available": 7.657901422764228}']

--------------------------19-----------------
**********************SQL Query: SELECT avg(longitude) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)**************************
['avg_longitude']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status"}}, {"$unwind": "$status"}, {"$group": {"_id": "$id", "avg_longitude": {"$avg": "$longitude"}, "max_bikes_available": {"$max": "$status.bikes_available"}}}, {"$match": {"max_bikes_available": {"$lte": 10}}}, {"$group": {"_id": None, "avg_longitude": {"$avg": "$avg_longitude"}}}])**************************
SELECT avg(longitude) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)
None
mysql res: ['{"avg_longitude": -122.0000}']
mongo res: ['{"avg_longitude": -122.0}']

--------------------------20-----------------
**********************SQL Query: SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80**************************
['date', 'zip_code']
**********************MongoDB Query: db.weather.find({ "max_temperature_f": { "$gte": 80 } },{ "date": 1, "zip_code": 1, "_id": 0 })**************************
translate SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80 success

--------------------------21-----------------
**********************SQL Query: SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60**************************
(None, OperationalError(1055, "Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'bike_1.T1.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by"))
execute mysql query error:(1055, "Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'bike_1.T1.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by")

--------------------------21-----------------
**********************SQL Query: SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code**************************
['zip_code', 'count_*']
**********************MongoDB Query: db.weather.aggregate([{"$match": {"max_wind_Speed_mph": {"$gte": 25}}}, {"$group": {"_id": "$zip_code", "count": {"$sum": 1}}, {"$project": {"_id": 0, "zip_code": "$_id", "count": 1}}])**************************
execute mongo query error:closing parenthesis ']' does not match opening parenthesis '{' (<string>, line 1)

--------------------------22-----------------
**********************SQL Query: SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)**************************
['date', 'zip_code']
Error parsing XML of prompt: not well-formed (invalid token): line 23, column 66
**********************MongoDB Query: db.weather.find({"min_dew_point_f": {"$lt": db.weather.find({"zip_code": 94107}).min_min_dew_point_f}},{"date": 1, "zip_code": 1, "_id": 0})**************************
execute mongo query error:'Cursor' object has no attribute 'min_min_dew_point_f'

--------------------------23-----------------
**********************SQL Query: SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id**************************
['id', 'installation_date']
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "station", "localField": "end_station_id", "foreignField": "id", "as": "station_info"}}, {"$unwind": "$station_info"}, {"$project": {"_id": 0, "id": "$id", "installation_date": "$station_info.installation_date"}}])**************************
translate SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id success

--------------------------24-----------------
**********************SQL Query: SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1**************************
['id']
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "station", "localField": "start_station_id", "foreignField": "id", "as": "station"}}, {"$unwind": "$station"}, {"$sort": {"station.dock_count": -1}}, {"$limit": 1}, {"$project": {"_id": 0, "id": "$id"}}])**************************
translate SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1 success

--------------------------25-----------------
**********************SQL Query: SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  "San Francisco"**************************
['count_*']
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "station", "localField": "end_station_id", "foreignField": "id", "as": "station"}}, {"$match": {"station.city": {"$ne": "San Francisco"}}}, {"$group": {"_id": None, "count": {"$sum": 1}}}, {"$project": {"_id": 0, "count": 1}}])**************************
SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  "San Francisco"
None
mysql res: ['{"count_*": 999}']
mongo res: ['{"count_*": null}']

--------------------------26-----------------
**********************SQL Query: SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != "San Francisco"**************************
['count_*']
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "station", "localField": "end_station_id", "foreignField": "id", "as": "station_info"}}, {"$match": {"station_info.city": {"$ne": "San Francisco"}}}, {"$group": {"_id": None, "count": {"$sum": 1}}}, {"$project": {"_id": 0, "count": 1}}])**************************
SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != "San Francisco"
None
mysql res: ['{"count_*": 999}']
mongo res: ['{"count_*": null}']

--------------------------27-----------------
**********************SQL Query: SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != "Fog" AND EVENTS != "Rain"**************************
['date']
**********************MongoDB Query: db.weather.find({ "zip_code": 94107, "EVENTS": { "$nin": ["Fog", "Rain"] } },{ "date": 1, "_id": 0 })**************************
Error comparing: Row number mismatch

--------------------------28-----------------
**********************SQL Query: SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7**************************
['id']
Error parsing XML of prompt: not well-formed (invalid token): line 23, column 134
**********************MongoDB Query: db.station.find({ "lat": { "$gt": 37.4 }, "id": { "$nin": db.status.aggregate([{"$group": {"_id": "$station_id", "min_bikes_available": {"$min": "$bikes_available"}}},{"$match": {"min_bikes_available": { "$lt": 7 }}}], { "_id": 0, "station_id": 1 }) }} , { "id": 1, "_id": 0 })**************************
execute mongo query error:'session' argument must be a ClientSession or None.

--------------------------29-----------------
**********************SQL Query: SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  "San Jose"**************************
['name']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status_info"}}, {"$unwind": "$status_info"}, {"$group": {"_id": "$status_info.station_id", "avg_bikes_available": {"$avg": "$status_info.bikes_available"}, "name": {"$first": "$name"} }}, {"$match": {"avg_bikes_available": {"$gt": 10}}}, {"$project": {"_id": 0, "name": 1}}])**************************
Error comparing: Row number mismatch

--------------------------30-----------------
**********************SQL Query: SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1**************************
['name', 'lat', 'city']
**********************MongoDB Query: db.station.find({},{"name":1,"lat":1,"city":1,"_id":0}).sort({"lat":1}).limit(1)**************************
SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1
None
mysql res: ['{"name": "San Antonio Shopping Center", "lat": 37, "city": "Mountain View"}']
mongo res: ['{"name": "San Jose Diridon Caltrain Station", "lat": 37, "city": "San Jose"}']

--------------------------31-----------------
**********************SQL Query: SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3**************************
['date', 'mean_temperature_f', 'mean_humidity']
**********************MongoDB Query: db.weather.find({},{"date":1,"mean_temperature_f":1,"mean_humidity":1,"_id":0}).sort({"max_gust_speed_mph":-1}).limit(3)**************************
SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3
None
mysql res: ['{"date": "12/12/2013", "mean_temperature_f": 42, "mean_humidity": 63}', '{"date": "11/20/2013", "mean_temperature_f": 57, "mean_humidity": 85}', '{"date": "11/21/2013", "mean_temperature_f": 54, "mean_humidity": 63}']
mongo res: ['{"date": "10/12/2013", "mean_temperature_f": 57, "mean_humidity": 69}', '{"date": "10/8/2013", "mean_temperature_f": 60, "mean_humidity": 60}', '{"date": "9/5/2013", "mean_temperature_f": 68, "mean_humidity": 63}']

--------------------------32-----------------
**********************SQL Query: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15**************************
['city', 'COUNT_*']
**********************MongoDB Query: db.station.aggregate([{"$group": {"_id": "$city", "count": {"$sum": 1}}}, {"$match": {"count": {"$gte": 15}}}, {"$project": {"_id": 0, "city": "$_id", "count": 1}}])**************************
SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15
None
mysql res: ['{"city": "San Jose", "COUNT_*": 16}', '{"city": "San Francisco", "COUNT_*": 35}']
mongo res: ['{"city": "San Francisco", "COUNT_*": null}', '{"city": "San Jose", "COUNT_*": null}']

--------------------------33-----------------
**********************SQL Query: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200**************************
(None, OperationalError(1055, "Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'bike_1.trip.start_station_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by"))
execute mysql query error:(1055, "Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'bike_1.trip.start_station_id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by")

--------------------------33-----------------
**********************SQL Query: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10**************************
['zip_code']
Error parsing XML of prompt: not well-formed (invalid token): line 23, column 88
**********************MongoDB Query: db.weather.aggregate([{"$group": {"_id": "$zip_code", "avg_mean_visibility_miles": {"$avg": "$mean_visibility_miles"}}},{"$match": {"avg_mean_visibility_miles": {"$lt": 10}}},{"$project": {"_id": 0, "zip_code": "$_id"}}])**************************
translate SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10 success

--------------------------34-----------------
**********************SQL Query: SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC**************************
['city']
**********************MongoDB Query: db.station.aggregate([{"$group": {"_id": "$city", "max_lat": {"$max": "$lat"}}},{"$sort": {"max_lat": -1}},{"$project": {"_id": 0, "city": "$_id"}}])**************************
translate SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC success

--------------------------35-----------------
**********************SQL Query: SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5**************************
['date', 'cloud_cover']
**********************MongoDB Query: db.weather.find({}, {"date": 1, "cloud_cover": 1, "_id": 0}).sort({"cloud_cover": -1}).limit(5)**************************
SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5
None
mysql res: ['{"date": "5/18/2015", "cloud_cover": 8}', '{"date": "3/5/2014", "cloud_cover": 8}', '{"date": "5/22/2015", "cloud_cover": 8}', '{"date": "12/11/2014", "cloud_cover": 8}', '{"date": "5/20/2015", "cloud_cover": 8}']
mongo res: ['{"date": "2/7/2014", "cloud_cover": 8}', '{"date": "2/6/2014", "cloud_cover": 8}', '{"date": "2/9/2014", "cloud_cover": 8}', '{"date": "2/8/2014", "cloud_cover": 8}', '{"date": "1/29/2014", "cloud_cover": 8}']

--------------------------36-----------------
**********************SQL Query: SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3**************************
['id', 'duration']
**********************MongoDB Query: db.trip.find({}, {"id": 1, "duration": 1, "_id": 0}).sort({"duration": -1}).limit(3)**************************
translate SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3 success

--------------------------37-----------------
**********************SQL Query: SELECT T1.name ,  T1.longitude ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id**************************
['name', 'longitude', 'avg_T2_duration']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "trip", "localField": "id", "foreignField": "start_station_id", "as": "trip_data"}}, {"$unwind": "$trip_data"}, {"$group": {"_id": "$trip_data.start_station_id", "name": {"$first": "$name"}, "longitude": {"$first": "$longitude"}, "avg_duration": {"$avg": "$trip_data.duration"}}}, {"$project": {"_id": 0, "name": 1, "longitude": 1, "avg_duration": 1}}])**************************
SELECT T1.name ,  T1.longitude ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id
None
mysql res: ['{"name": "Howard at 2nd", "longitude": -122, "avg_T2_duration": 414.5117}', '{"name": "South Van Ness at Market", "longitude": -122, "avg_T2_duration": 912.8476}', '{"name": "Market at Sansome", "longitude": -122, "avg_T2_duration": 786.4408}', '{"name": "Washington at Kearney", "longitude": -122, "avg_T2_duration": 1497.7671}', '{"name": "Beale at Market", "longitude": -122, "avg_T2_duration": 752.6638}', '{"name": "Clay at Battery", "longitude": -122, "avg_T2_duration": 906.0828}', '{"name": "Embarcadero at Vallejo", "longitude": -122, "avg_T2_duration": 1817.2216}', '{"name": "Davis at Jackson", "longitude": -122, "avg_T2_duration": 1067.6629}', '{"name": "2nd at Townsend", "longitude": -122, "avg_T2_duration": 905.3341}', '{"name": "Powell Street BART", "longitude": -122, "avg_T2_duration": 1245.5837}', '{"name": "Temporary Transbay Terminal (Howard at Beale)", "longitude": -122, "avg_T2_duration": 535.0488}', '{"name": "Park at Olive", "longitude": -122, "avg_T2_duration": 872.2222}', '{"name": "2nd at South Park", "longitude": -122, "avg_T2_duration": 512.8462}', '{"name": "Harry Bridges Plaza (Ferry Building)", "longitude": -122, "avg_T2_duration": 1802.6722}', '{"name": "Steuart at Market", "longitude": -122, "avg_T2_duration": 890.9442}', '{"name": "Embarcadero at Sansome", "longitude": -122, "avg_T2_duration": 1630.0023}', '{"name": "5th at Howard", "longitude": -122, "avg_T2_duration": 551.4051}', '{"name": "Spear at Folsom", "longitude": -122, "avg_T2_duration": 655.7167}', '{"name": "San Francisco Caltrain (Townsend at 4th)", "longitude": -122, "avg_T2_duration": 801.9405}', '{"name": "Yerba Buena Center of the Arts (3rd @ Howard)", "longitude": -122, "avg_T2_duration": 561.7395}', '{"name": "Embarcadero at Bryant", "longitude": -122, "avg_T2_duration": 766.0746}', '{"name": "Market at 10th", "longitude": -122, "avg_T2_duration": 1139.6390}', '{"name": "Embarcadero at Folsom", "longitude": -122, "avg_T2_duration": 938.7895}', '{"name": "Townsend at 7th", "longitude": -122, "avg_T2_duration": 568.9298}', '{"name": "Market at 4th", "longitude": -122, "avg_T2_duration": 1664.8505}', '{"name": "Mountain View City Hall", "longitude": -122, "avg_T2_duration": 563.0333}', '{"name": "Commercial at Montgomery", "longitude": -122, "avg_T2_duration": 524.7748}', '{"name": "San Francisco Caltrain 2 (330 Townsend)", "longitude": -122, "avg_T2_duration": 725.3219}', '{"name": "Mountain View Caltrain Station", "longitude": -122, "avg_T2_duration": 714.8062}', '{"name": "San Pedro Square", "longitude": -122, "avg_T2_duration": 840.2250}', '{"name": "Golden Gate at Polk", "longitude": -122, "avg_T2_duration": 734.3861}', '{"name": "Santa Clara at Almaden", "longitude": -122, "avg_T2_duration": 378.2800}', '{"name": "Civic Center BART (7th at Market)", "longitude": -122, "avg_T2_duration": 1276.7208}', '{"name": "2nd at Folsom", "longitude": -122, "avg_T2_duration": 399.6787}', '{"name": "San Francisco City Hall", "longitude": -122, "avg_T2_duration": 1774.6316}', '{"name": "Redwood City Medical Center", "longitude": -122, "avg_T2_duration": 555.4000}', '{"name": "San Jose Diridon Caltrain Station", "longitude": -122, "avg_T2_duration": 544.7612}', '{"name": "Santa Clara County Civic Center", "longitude": -122, "avg_T2_duration": 862.4667}', '{"name": "San Jose Civic Center", "longitude": -122, "avg_T2_duration": 885.0000}', '{"name": "SJSU 4th at San Carlos", "longitude": -122, "avg_T2_duration": 711.7778}', '{"name": "Broadway St at Battery St", "longitude": -122, "avg_T2_duration": 1044.7238}', '{"name": "University and Emerson", "longitude": -122, "avg_T2_duration": 2643.6000}', '{"name": "Post at Kearney", "longitude": -122, "avg_T2_duration": 825.1929}', '{"name": "Palo Alto Caltrain Station", "longitude": -122, "avg_T2_duration": 1653.3256}', '{"name": "Grant Avenue at Columbus Avenue", "longitude": -122, "avg_T2_duration": 1423.3750}', '{"name": "Redwood City Caltrain Station", "longitude": -122, "avg_T2_duration": 2643.8718}', '{"name": "Japantown", "longitude": -122, "avg_T2_duration": 1230.6552}', '{"name": "San Salvador at 1st", "longitude": -122, "avg_T2_duration": 682.3333}', '{"name": "Castro Street and El Camino Real", "longitude": -122, "avg_T2_duration": 1082.7143}', '{"name": "Arena Green / SAP Center", "longitude": -122, "avg_T2_duration": 608.8333}', '{"name": "Ryland Park", "longitude": -122, "avg_T2_duration": 556.0000}', '{"name": "Powell at Post (Union Square)", "longitude": -122, "avg_T2_duration": 765.4459}', '{"name": "Rengstorff Avenue / California Street", "longitude": -122, "avg_T2_duration": 699.7000}', '{"name": "Cowper at University", "longitude": -122, "avg_T2_duration": 1164.1154}', '{"name": "Mechanics Plaza (Market at Battery)", "longitude": -122, "avg_T2_duration": 655.2933}', '{"name": "California Ave Caltrain Station", "longitude": -122, "avg_T2_duration": 1423.8421}', '{"name": "Adobe on Almaden", "longitude": -122, "avg_T2_duration": 980.0714}', '{"name": "St James Park", "longitude": -122, "avg_T2_duration": 616.4000}', '{"name": "San Jose City Hall", "longitude": -122, "avg_T2_duration": 1123.4000}', '{"name": "MLK Library", "longitude": -122, "avg_T2_duration": 810.5417}', '{"name": "San Antonio Caltrain Station", "longitude": -122, "avg_T2_duration": 380.4091}', '{"name": "San Antonio Shopping Center", "longitude": -122, "avg_T2_duration": 667.5926}', '{"name": "SJSU - San Salvador at 9th", "longitude": -122, "avg_T2_duration": 3597.0952}', '{"name": "Franklin at Maple", "longitude": -122, "avg_T2_duration": 3909.0000}', '{"name": "Evelyn Park and Ride", "longitude": -122, "avg_T2_duration": 918.1316}', '{"name": "Paseo de San Antonio", "longitude": -122, "avg_T2_duration": 529.0909}', '{"name": "Stanford in Redwood City", "longitude": -122, "avg_T2_duration": 979.0667}', '{"name": "Redwood City Public Library", "longitude": -122, "avg_T2_duration": 741.0000}', '{"name": "Mezes Park", "longitude": -122, "avg_T2_duration": 253.3333}']
mongo res: ['{"name": "Embarcadero at Folsom", "longitude": -122, "avg_T2_duration": null}', '{"name": "2nd at South Park", "longitude": -122, "avg_T2_duration": null}', '{"name": "Arena Green / SAP Center", "longitude": -122, "avg_T2_duration": null}', '{"name": "Howard at 2nd", "longitude": -122, "avg_T2_duration": null}', '{"name": "Evelyn Park and Ride", "longitude": -122, "avg_T2_duration": null}', '{"name": "Redwood City Medical Center", "longitude": -122, "avg_T2_duration": null}', '{"name": "Spear at Folsom", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Antonio Caltrain Station", "longitude": -122, "avg_T2_duration": null}', '{"name": "MLK Library", "longitude": -122, "avg_T2_duration": null}', '{"name": "Stanford in Redwood City", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Antonio Shopping Center", "longitude": -122, "avg_T2_duration": null}', '{"name": "Washington at Kearney", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Francisco Caltrain 2 (330 Townsend)", "longitude": -122, "avg_T2_duration": null}', '{"name": "Steuart at Market", "longitude": -122, "avg_T2_duration": null}', '{"name": "Market at 4th", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Jose Civic Center", "longitude": -122, "avg_T2_duration": null}', '{"name": "Franklin at Maple", "longitude": -122, "avg_T2_duration": null}', '{"name": "Redwood City Caltrain Station", "longitude": -122, "avg_T2_duration": null}', '{"name": "2nd at Folsom", "longitude": -122, "avg_T2_duration": null}', '{"name": "5th at Howard", "longitude": -122, "avg_T2_duration": null}', '{"name": "Redwood City Public Library", "longitude": -122, "avg_T2_duration": null}', '{"name": "University and Emerson", "longitude": -122, "avg_T2_duration": null}', '{"name": "Palo Alto Caltrain Station", "longitude": -122, "avg_T2_duration": null}', '{"name": "Castro Street and El Camino Real", "longitude": -122, "avg_T2_duration": null}', '{"name": "Golden Gate at Polk", "longitude": -122, "avg_T2_duration": null}', '{"name": "Mechanics Plaza (Market at Battery)", "longitude": -122, "avg_T2_duration": null}', '{"name": "Adobe on Almaden", "longitude": -122, "avg_T2_duration": null}', '{"name": "Paseo de San Antonio", "longitude": -122, "avg_T2_duration": null}', '{"name": "Post at Kearney", "longitude": -122, "avg_T2_duration": null}', '{"name": "Townsend at 7th", "longitude": -122, "avg_T2_duration": null}', '{"name": "Harry Bridges Plaza (Ferry Building)", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Francisco City Hall", "longitude": -122, "avg_T2_duration": null}', '{"name": "Mezes Park", "longitude": -122, "avg_T2_duration": null}', '{"name": "Market at Sansome", "longitude": -122, "avg_T2_duration": null}', '{"name": "Market at 10th", "longitude": -122, "avg_T2_duration": null}', '{"name": "Ryland Park", "longitude": -122, "avg_T2_duration": null}', '{"name": "Temporary Transbay Terminal (Howard at Beale)", "longitude": -122, "avg_T2_duration": null}', '{"name": "Beale at Market", "longitude": -122, "avg_T2_duration": null}', '{"name": "Park at Olive", "longitude": -122, "avg_T2_duration": null}', '{"name": "Embarcadero at Vallejo", "longitude": -122, "avg_T2_duration": null}', '{"name": "SJSU - San Salvador at 9th", "longitude": -122, "avg_T2_duration": null}', '{"name": "Embarcadero at Sansome", "longitude": -122, "avg_T2_duration": null}', '{"name": "Japantown", "longitude": -122, "avg_T2_duration": null}', '{"name": "South Van Ness at Market", "longitude": -122, "avg_T2_duration": null}', '{"name": "2nd at Townsend", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Jose City Hall", "longitude": -122, "avg_T2_duration": null}', '{"name": "Clay at Battery", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Jose Diridon Caltrain Station", "longitude": -122, "avg_T2_duration": null}', '{"name": "Santa Clara at Almaden", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Francisco Caltrain (Townsend at 4th)", "longitude": -122, "avg_T2_duration": null}', '{"name": "Rengstorff Avenue / California Street", "longitude": -122, "avg_T2_duration": null}', '{"name": "Mountain View Caltrain Station", "longitude": -122, "avg_T2_duration": null}', '{"name": "Powell Street BART", "longitude": -122, "avg_T2_duration": null}', '{"name": "Broadway St at Battery St", "longitude": -122, "avg_T2_duration": null}', '{"name": "Cowper at University", "longitude": -122, "avg_T2_duration": null}', '{"name": "Davis at Jackson", "longitude": -122, "avg_T2_duration": null}', '{"name": "St James Park", "longitude": -122, "avg_T2_duration": null}', '{"name": "Commercial at Montgomery", "longitude": -122, "avg_T2_duration": null}', '{"name": "Powell at Post (Union Square)", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Salvador at 1st", "longitude": -122, "avg_T2_duration": null}', '{"name": "California Ave Caltrain Station", "longitude": -122, "avg_T2_duration": null}', '{"name": "San Pedro Square", "longitude": -122, "avg_T2_duration": null}', '{"name": "Yerba Buena Center of the Arts (3rd @ Howard)", "longitude": -122, "avg_T2_duration": null}', '{"name": "Embarcadero at Bryant", "longitude": -122, "avg_T2_duration": null}', '{"name": "Grant Avenue at Columbus Avenue", "longitude": -122, "avg_T2_duration": null}', '{"name": "Mountain View City Hall", "longitude": -122, "avg_T2_duration": null}', '{"name": "SJSU 4th at San Carlos", "longitude": -122, "avg_T2_duration": null}', '{"name": "Santa Clara County Civic Center", "longitude": -122, "avg_T2_duration": null}', '{"name": "Civic Center BART (7th at Market)", "longitude": -122, "avg_T2_duration": null}']

--------------------------38-----------------
**********************SQL Query: SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id**************************
['name', 'lat', 'min_T2_duration']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "trip", "localField": "id", "foreignField": "end_station_id", "as": "trip_data"}}, {"$unwind": "$trip_data"}, {"$group": {"_id": "$trip_data.end_station_id", "name": {"$first": "$name"}, "lat": {"$first": "$lat"}, "min_duration": {"$min": "$trip_data.duration"}}}, {"$project": {"_id": 0, "name": 1, "lat": 1, "min_duration": 1}}])**************************
SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id
None
mysql res: ['{"name": "San Francisco Caltrain 2 (330 Townsend)", "lat": 38, "min_T2_duration": 77}', '{"name": "Harry Bridges Plaza (Ferry Building)", "lat": 38, "min_T2_duration": 114}', '{"name": "2nd at Townsend", "lat": 38, "min_T2_duration": 68}', '{"name": "San Francisco Caltrain (Townsend at 4th)", "lat": 38, "min_T2_duration": 61}', '{"name": "Howard at 2nd", "lat": 38, "min_T2_duration": 62}', '{"name": "Temporary Transbay Terminal (Howard at Beale)", "lat": 38, "min_T2_duration": 86}', '{"name": "Market at Sansome", "lat": 38, "min_T2_duration": 104}', '{"name": "Townsend at 7th", "lat": 38, "min_T2_duration": 138}', '{"name": "Palo Alto Caltrain Station", "lat": 37, "min_T2_duration": 80}', '{"name": "Market at 10th", "lat": 38, "min_T2_duration": 101}', '{"name": "Civic Center BART (7th at Market)", "lat": 38, "min_T2_duration": 106}', '{"name": "Embarcadero at Folsom", "lat": 38, "min_T2_duration": 63}', '{"name": "Grant Avenue at Columbus Avenue", "lat": 38, "min_T2_duration": 143}', '{"name": "Market at 4th", "lat": 38, "min_T2_duration": 140}', '{"name": "5th at Howard", "lat": 38, "min_T2_duration": 73}', '{"name": "South Van Ness at Market", "lat": 38, "min_T2_duration": 70}', '{"name": "Steuart at Market", "lat": 38, "min_T2_duration": 64}', '{"name": "Powell at Post (Union Square)", "lat": 38, "min_T2_duration": 209}', '{"name": "Powell Street BART", "lat": 38, "min_T2_duration": 104}', '{"name": "Mountain View Caltrain Station", "lat": 37, "min_T2_duration": 189}', '{"name": "Commercial at Montgomery", "lat": 38, "min_T2_duration": 76}', '{"name": "Davis at Jackson", "lat": 38, "min_T2_duration": 84}', '{"name": "San Jose Diridon Caltrain Station", "lat": 37, "min_T2_duration": 195}', '{"name": "Golden Gate at Polk", "lat": 38, "min_T2_duration": 107}', '{"name": "2nd at South Park", "lat": 38, "min_T2_duration": 71}', '{"name": "Spear at Folsom", "lat": 38, "min_T2_duration": 139}', '{"name": "Embarcadero at Bryant", "lat": 38, "min_T2_duration": 136}', '{"name": "Embarcadero at Sansome", "lat": 38, "min_T2_duration": 62}', '{"name": "Post at Kearney", "lat": 38, "min_T2_duration": 73}', '{"name": "Rengstorff Avenue / California Street", "lat": 37, "min_T2_duration": 320}', '{"name": "San Mateo County Center", "lat": 37, "min_T2_duration": 126}', '{"name": "Paseo de San Antonio", "lat": 37, "min_T2_duration": 147}', '{"name": "Yerba Buena Center of the Arts (3rd @ Howard)", "lat": 38, "min_T2_duration": 126}', '{"name": "Broadway St at Battery St", "lat": 38, "min_T2_duration": 105}', '{"name": "Ryland Park", "lat": 37, "min_T2_duration": 269}', '{"name": "Beale at Market", "lat": 38, "min_T2_duration": 72}', '{"name": "Clay at Battery", "lat": 38, "min_T2_duration": 92}', '{"name": "San Pedro Square", "lat": 37, "min_T2_duration": 182}', '{"name": "Park at Olive", "lat": 37, "min_T2_duration": 166}', '{"name": "2nd at Folsom", "lat": 38, "min_T2_duration": 111}', '{"name": "Castro Street and El Camino Real", "lat": 37, "min_T2_duration": 166}', '{"name": "California Ave Caltrain Station", "lat": 37, "min_T2_duration": 151}', '{"name": "San Salvador at 1st", "lat": 37, "min_T2_duration": 161}', '{"name": "Santa Clara at Almaden", "lat": 37, "min_T2_duration": 169}', '{"name": "Washington at Kearney", "lat": 38, "min_T2_duration": 175}', '{"name": "MLK Library", "lat": 37, "min_T2_duration": 209}', '{"name": "San Jose City Hall", "lat": 37, "min_T2_duration": 219}', '{"name": "Mountain View City Hall", "lat": 37, "min_T2_duration": 145}', '{"name": "Japantown", "lat": 37, "min_T2_duration": 259}', '{"name": "Santa Clara County Civic Center", "lat": 37, "min_T2_duration": 409}', '{"name": "Arena Green / SAP Center", "lat": 37, "min_T2_duration": 165}', '{"name": "Embarcadero at Vallejo", "lat": 38, "min_T2_duration": 111}', '{"name": "St James Park", "lat": 37, "min_T2_duration": 101}', '{"name": "San Francisco City Hall", "lat": 38, "min_T2_duration": 120}', '{"name": "Mechanics Plaza (Market at Battery)", "lat": 38, "min_T2_duration": 87}', '{"name": "SJSU - San Salvador at 9th", "lat": 37, "min_T2_duration": 258}', '{"name": "Cowper at University", "lat": 37, "min_T2_duration": 145}', '{"name": "Adobe on Almaden", "lat": 37, "min_T2_duration": 237}', '{"name": "SJSU 4th at San Carlos", "lat": 37, "min_T2_duration": 205}', '{"name": "University and Emerson", "lat": 37, "min_T2_duration": 631}', '{"name": "Franklin at Maple", "lat": 37, "min_T2_duration": 198}', '{"name": "San Antonio Caltrain Station", "lat": 37, "min_T2_duration": 153}', '{"name": "Evelyn Park and Ride", "lat": 37, "min_T2_duration": 191}', '{"name": "San Antonio Shopping Center", "lat": 37, "min_T2_duration": 198}', '{"name": "Stanford in Redwood City", "lat": 37, "min_T2_duration": 651}', '{"name": "Redwood City Medical Center", "lat": 37, "min_T2_duration": 225}', '{"name": "Redwood City Caltrain Station", "lat": 37, "min_T2_duration": 206}', '{"name": "Mezes Park", "lat": 37, "min_T2_duration": 225}', '{"name": "Redwood City Public Library", "lat": 37, "min_T2_duration": 1193}', '{"name": "San Jose Civic Center", "lat": 37, "min_T2_duration": 211}']
mongo res: ['{"name": "Embarcadero at Folsom", "lat": 38, "min_T2_duration": null}', '{"name": "2nd at South Park", "lat": 38, "min_T2_duration": null}', '{"name": "Arena Green / SAP Center", "lat": 37, "min_T2_duration": null}', '{"name": "Howard at 2nd", "lat": 38, "min_T2_duration": null}', '{"name": "Evelyn Park and Ride", "lat": 37, "min_T2_duration": null}', '{"name": "Redwood City Medical Center", "lat": 37, "min_T2_duration": null}', '{"name": "Spear at Folsom", "lat": 38, "min_T2_duration": null}', '{"name": "San Antonio Caltrain Station", "lat": 37, "min_T2_duration": null}', '{"name": "MLK Library", "lat": 37, "min_T2_duration": null}', '{"name": "Stanford in Redwood City", "lat": 37, "min_T2_duration": null}', '{"name": "San Antonio Shopping Center", "lat": 37, "min_T2_duration": null}', '{"name": "Washington at Kearney", "lat": 38, "min_T2_duration": null}', '{"name": "San Francisco Caltrain 2 (330 Townsend)", "lat": 38, "min_T2_duration": null}', '{"name": "Steuart at Market", "lat": 38, "min_T2_duration": null}', '{"name": "Market at 4th", "lat": 38, "min_T2_duration": null}', '{"name": "San Jose Civic Center", "lat": 37, "min_T2_duration": null}', '{"name": "Franklin at Maple", "lat": 37, "min_T2_duration": null}', '{"name": "Redwood City Caltrain Station", "lat": 37, "min_T2_duration": null}', '{"name": "2nd at Folsom", "lat": 38, "min_T2_duration": null}', '{"name": "5th at Howard", "lat": 38, "min_T2_duration": null}', '{"name": "Redwood City Public Library", "lat": 37, "min_T2_duration": null}', '{"name": "University and Emerson", "lat": 37, "min_T2_duration": null}', '{"name": "Palo Alto Caltrain Station", "lat": 37, "min_T2_duration": null}', '{"name": "Castro Street and El Camino Real", "lat": 37, "min_T2_duration": null}', '{"name": "Golden Gate at Polk", "lat": 38, "min_T2_duration": null}', '{"name": "Mechanics Plaza (Market at Battery)", "lat": 38, "min_T2_duration": null}', '{"name": "Adobe on Almaden", "lat": 37, "min_T2_duration": null}', '{"name": "Paseo de San Antonio", "lat": 37, "min_T2_duration": null}', '{"name": "Post at Kearney", "lat": 38, "min_T2_duration": null}', '{"name": "Townsend at 7th", "lat": 38, "min_T2_duration": null}', '{"name": "Harry Bridges Plaza (Ferry Building)", "lat": 38, "min_T2_duration": null}', '{"name": "San Francisco City Hall", "lat": 38, "min_T2_duration": null}', '{"name": "Mezes Park", "lat": 37, "min_T2_duration": null}', '{"name": "Market at Sansome", "lat": 38, "min_T2_duration": null}', '{"name": "Market at 10th", "lat": 38, "min_T2_duration": null}', '{"name": "Ryland Park", "lat": 37, "min_T2_duration": null}', '{"name": "Temporary Transbay Terminal (Howard at Beale)", "lat": 38, "min_T2_duration": null}', '{"name": "Beale at Market", "lat": 38, "min_T2_duration": null}', '{"name": "Park at Olive", "lat": 37, "min_T2_duration": null}', '{"name": "San Mateo County Center", "lat": 37, "min_T2_duration": null}', '{"name": "Embarcadero at Vallejo", "lat": 38, "min_T2_duration": null}', '{"name": "SJSU - San Salvador at 9th", "lat": 37, "min_T2_duration": null}', '{"name": "Embarcadero at Sansome", "lat": 38, "min_T2_duration": null}', '{"name": "Japantown", "lat": 37, "min_T2_duration": null}', '{"name": "South Van Ness at Market", "lat": 38, "min_T2_duration": null}', '{"name": "2nd at Townsend", "lat": 38, "min_T2_duration": null}', '{"name": "San Jose City Hall", "lat": 37, "min_T2_duration": null}', '{"name": "Clay at Battery", "lat": 38, "min_T2_duration": null}', '{"name": "San Jose Diridon Caltrain Station", "lat": 37, "min_T2_duration": null}', '{"name": "Santa Clara at Almaden", "lat": 37, "min_T2_duration": null}', '{"name": "San Francisco Caltrain (Townsend at 4th)", "lat": 38, "min_T2_duration": null}', '{"name": "Rengstorff Avenue / California Street", "lat": 37, "min_T2_duration": null}', '{"name": "Mountain View Caltrain Station", "lat": 37, "min_T2_duration": null}', '{"name": "Powell Street BART", "lat": 38, "min_T2_duration": null}', '{"name": "Broadway St at Battery St", "lat": 38, "min_T2_duration": null}', '{"name": "Cowper at University", "lat": 37, "min_T2_duration": null}', '{"name": "Davis at Jackson", "lat": 38, "min_T2_duration": null}', '{"name": "St James Park", "lat": 37, "min_T2_duration": null}', '{"name": "Commercial at Montgomery", "lat": 38, "min_T2_duration": null}', '{"name": "Powell at Post (Union Square)", "lat": 38, "min_T2_duration": null}', '{"name": "San Salvador at 1st", "lat": 37, "min_T2_duration": null}', '{"name": "California Ave Caltrain Station", "lat": 37, "min_T2_duration": null}', '{"name": "San Pedro Square", "lat": 37, "min_T2_duration": null}', '{"name": "Yerba Buena Center of the Arts (3rd @ Howard)", "lat": 38, "min_T2_duration": null}', '{"name": "Embarcadero at Bryant", "lat": 38, "min_T2_duration": null}', '{"name": "Grant Avenue at Columbus Avenue", "lat": 38, "min_T2_duration": null}', '{"name": "Mountain View City Hall", "lat": 37, "min_T2_duration": null}', '{"name": "SJSU 4th at San Carlos", "lat": 37, "min_T2_duration": null}', '{"name": "Santa Clara County Civic Center", "lat": 37, "min_T2_duration": null}', '{"name": "Civic Center BART (7th at Market)", "lat": 38, "min_T2_duration": null}']

--------------------------39-----------------
**********************SQL Query: SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100**************************
['start_station_name']
Error parsing XML of prompt: not well-formed (invalid token): line 23, column 67
**********************MongoDB Query: db.trip.distinct("start_station_name", { "duration": { "$lt": 100 } })**************************
execute mongo query error:'str' object has no attribute 'get'

--------------------------40-----------------
**********************SQL Query: SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70**************************
['zip_code']
**********************MongoDB Query: db.weather.distinct("zip_code", { "max_dew_point_f": { "$lt": 70 } })**************************
execute mongo query error:'int' object has no attribute 'get'

--------------------------41-----------------
**********************SQL Query: SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)**************************
['id']
**********************MongoDB Query: db.trip.find({ "duration": { "$gte": db.trip.aggregate([{"$match": {"zip_code": 94103}}, {"$group": {"_id": None, "avg_duration": {"$avg": "$duration"}}}])[0].avg_duration } },{ "id": 1, "_id": 0 })**************************
execute mongo query error:'CommandCursor' object is not subscriptable

--------------------------42-----------------
**********************SQL Query: SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31**************************
['date']
**********************MongoDB Query: db.weather.find({ "mean_sea_level_pressure_inches": { "$gte": 30.3, "$lte": 31 } },{ "date": 1, "_id": 0 })**************************
translate SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31 success

--------------------------43-----------------
**********************SQL Query: SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1**************************
['date', 'max_temperature_f - min_temperature_f']
**********************MongoDB Query: db.weather.aggregate([{"$project": {"date": 1, "temperature_diff": {"$subtract": ["$max_temperature_f", "$min_temperature_f"]}}}, {"$sort": {"temperature_diff": 1}}, {"$limit": 1}])**************************
SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1
None
mysql res: ['{"date": "4/16/2015", "max_temperature_f - min_temperature_f": 0}']
mongo res: ['{"date": "4/16/2015", "max_temperature_f - min_temperature_f": null}']

--------------------------44-----------------
**********************SQL Query: SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12**************************
['id', 'name']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status_join"}}, {"$unwind": "$status_join"}, {"$match": {"status_join.bikes_available": {"$gt": 12}}}, {"$project": {"_id": 0, "id": 1, "name": 1}}])**************************
Error comparing: Row number mismatch

--------------------------45-----------------
**********************SQL Query: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100**************************
['zip_code']
Error parsing XML of prompt: not well-formed (invalid token): line 23, column 80
**********************MongoDB Query: db.weather.aggregate([{"$group": {"_id": "$zip_code", "avg_mean_humidity": {"$avg": "$mean_humidity"}}},{"$match": {"avg_mean_humidity": {"$lt": 70}}},{"$group": {"_id": "$zip_code", "count": {"$sum": 1}}},{"$match": {"count": {"$gte": 100}},{"$project": {"_id": 0, "zip_code": "$_id"}}])**************************
execute mongo query error:closing parenthesis ']' does not match opening parenthesis '{' (<string>, line 1)

--------------------------46-----------------
**********************SQL Query: SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100**************************
['name']
**********************MongoDB Query: db.station.find({ "city": "Palo Alto", "name": { "$nin": db.trip.aggregate([{"$group": {"_id": "$end_station_name", "count": {"$sum": 1}}}, {"$match": {"count": {"$gt": 100}}}, {"$project": {"_id": 0, "end_station_name": "$_id"}}]) }})**************************
execute mongo query error:cannot encode object: <pymongo.command_cursor.CommandCursor object at 0x14635b290>, of type: <class 'pymongo.command_cursor.CommandCursor'>

--------------------------47-----------------
**********************SQL Query: SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  "Mountain View" AND T3.city  =  "Palo Alto"**************************
['count_*']
**********************MongoDB Query: db.station.aggregate([{"$match": {"city": "Mountain View"}}, {"$lookup": {"from": "trip", "localField": "id", "foreignField": "start_station_id", "as": "T2"}}, {"$unwind": "$T2"}, {"$lookup": {"from": "station", "localField": "T2.id", "foreignField": "id", "as": "T3"}}, {"$unwind": "$T3"}, {"$match": {"T3.city": "Palo Alto"}}, {"$lookup": {"from": "trip", "localField": "T3.id", "foreignField": "end_station_id", "as": "T4"}}, {"$unwind": "$T4"}, {"$group": {"_id": None, "count": {"$sum": 1}}}, {"$project": {"_id": 0, "count": 1}}])**************************
Error comparing: Row number mismatch

--------------------------48-----------------
**********************SQL Query: SELECT avg(T1.lat) ,  avg(T1.longitude) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id**************************
['avg_T1_lat', 'avg_T1_longitude']
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "trip", "localField": "id", "foreignField": "start_station_id", "as": "joined"}}, {"$unwind": "$joined"}, {"$group": {"_id": null, "avg_lat": {"$avg": "$lat"}, "avg_longitude": {"$avg": "$longitude"}}}, {"$project": {"_id": 0, "avg_lat": 1, "avg_longitude": 1}}])**************************
execute mongo query error:name 'null' is not defined
Success: 16
Total: 49
