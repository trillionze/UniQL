--------

--------------------------1-----------------
schema:['count_*']
---------------------------Execute SQL Query:SELECT count(*) FROM authors-----------------
---------------------------Execute Target Query:db.authors.aggregate([ { "$count": "count" } ])-----------------
mismatch between MySQL and target
mysql res: ['{"count_*": 13}']
target res: ['{"count_*": null}']

--------------------------2-----------------
schema:['count_*']
---------------------------Execute SQL Query:SELECT count(*) FROM inst-----------------
---------------------------Execute Target Query:MongoDB Query: db.inst.aggregate([ { "$group": { "_id": null, "count": { "$sum": 1 } } } ])-----------------
execute target query error:invalid syntax (<string>, line 1)

--------------------------3-----------------
schema:['count_*']
---------------------------Execute SQL Query:SELECT count(*) FROM papers-----------------
---------------------------Execute Target Query:db.papers.aggregate([ { "$count": "count" } ])-----------------
mismatch between MySQL and target
mysql res: ['{"count_*": 7}']
target res: ['{"count_*": null}']

--------------------------4-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Jeremy" AND t1.lname  =  "Gibbons"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$match": { "fname": "Jeremy", "lname": "Gibbons" } },
    { "$lookup": {
        "from": "authorship",
        "localField": "authid",
        "foreignField": "authid",
        "as": "authorship"
    }},
    { "$unwind": "$authorship" },
    { "$lookup": {
        "from": "papers",
        "localField": "authorship_paperid",
        "foreignField": "paperid",
        "as": "papers"
    }},
    { "$unwind": "$papers" },
    { "$project": { "title": "$papers_title", "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"title": "Just do it: Simple Monadic Equational Reasoning"}']
target res: ['{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}', '{"title": null}']

--------------------------5-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Aaron" AND t1.lname  =  "Turon"-----------------
---------------------------Execute Target Query:db.papers.aggregate([
    { "$lookup": { "from": "authorship", "localField": "paperid", "foreignField": "paperid", "as": "authorship" } },
    { "$unwind": "$authorship" },
    { "$lookup": { "from": "authors", "localField": "authorship.authid", "foreignField": "authid", "as": "authors" } },
    { "$unwind": "$authors" },
    { "$match": { "authors.fname": "Aaron", "authors.lname": "Turon" } },
    { "$project": { "title": 1, "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"title": "Functional Pearl: Modular Rollback through Control Logging"}']
target res: ['{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}', '{"title": "Binders Unbound"}']

--------------------------6-----------------
schema:['count_*']
---------------------------Execute SQL Query:SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  "Atsushi" AND t1.lname  =  "Ohori"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": { "from": "authorship", "localField": "authid", "foreignField": "authid", "as": "t2" } },
    { "$unwind": "$t2" },
    { "$lookup": { "from": "papers", "localField": "t2.paperid", "foreignField": "paperid", "as": "t3" } },
    { "$unwind": "$t3" },
    { "$match": { "fname": "Atsushi", "lname": "Ohori" } },
    { "$count": "count" }
])-----------------
mismatch between MySQL and target
mysql res: ['{"count_*": 1}']
target res: ['{"count_*": null}']

--------------------------7-----------------
schema:['name']
---------------------------Execute SQL Query:SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  "Matthias" AND t1.lname  =  "Blume"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$match": { "fname": "Matthias", "lname": "Blume" } },
    { "$lookup": {
        "from": "authorship",
        "localField": "authid",
        "foreignField": "authid",
        "as": "authorship"
    }},
    { "$unwind": "$authorship" },
    { "$lookup": {
        "from": "inst",
        "localField": "authorship.instid",
        "foreignField": "instid",
        "as": "inst"
    }},
    { "$unwind": "$inst" },
    { "$group": {
        "_id": "$inst.name"
    }},
    { "$project": {
        "name": "$_id",
        "_id": 0
    }}
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"name": "Google"}']
target res: ['{"name": "Google"}', '{"name": "University of Pennsylvania"}', '{"name": "Portland State University"}', '{"name": "University of Oxford"}', '{"name": "Tohoku University"}', '{"name": "Northeastern University"}', '{"name": "Indiana University"}', '{"name": "INRIA"}']

--------------------------8-----------------
schema:['name']
---------------------------Execute SQL Query:SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  "Katsuhiro" AND t1.lname  =  "Ueno"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$match": { "fname": "Katsuhiro", "lname": "Ueno" } },
    { "$lookup": {
        "from": "authorship",
        "localField": "authid",
        "foreignField": "authid",
        "as": "authorship"
    }},
    { "$unwind": "$authorship" },
    { "$lookup": {
        "from": "inst",
        "localField": "authorship.instid",
        "foreignField": "instid",
        "as": "inst"
    }},
    { "$unwind": "$inst" },
    { "$group": {
        "_id": "$inst.name"
    }},
    { "$project": {
        "name": "$_id",
        "_id": 0
    }}
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"name": "Tohoku University"}']
target res: ['{"name": "Google"}', '{"name": "University of Pennsylvania"}', '{"name": "Portland State University"}', '{"name": "University of Oxford"}', '{"name": "Tohoku University"}', '{"name": "Northeastern University"}', '{"name": "Indiana University"}', '{"name": "INRIA"}']

--------------------------9-----------------
schema:['fname', 'lname']
---------------------------Execute SQL Query:SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "University of Oxford"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": { "from": "authorship", "localField": "authid", "foreignField": "authid", "as": "t2" } },
    { "$unwind": "$t2" },
    { "$lookup": { "from": "inst", "localField": "t2.instid", "foreignField": "instid", "as": "t3" } },
    { "$unwind": "$t3" },
    { "$match": { "t3.name": "University of Oxford" } },
    { "$group": { "_id": { "fname": "$fname", "lname": "$lname" } } },
    { "$project": { "fname": "$_id.fname", "lname": "$_id.lname", "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"fname": "Jeremy", "lname": "Gibbons"}', '{"fname": "Ralf", "lname": "Hinze"}', '{"fname": "Daniel W. H.", "lname": "James"}']
target res: ['{"fname": "Daniel W. H.", "lname": "James"}', '{"fname": "Matthias", "lname": "Blume"}', '{"fname": "Nicolas", "lname": "Pouillard"}', '{"fname": "Brent", "lname": "Yorgey"}', '{"fname": "Olin", "lname": "Shivers"}', '{"fname": "Jeremy", "lname": "Gibbons"}', '{"fname": "Katsuhiro", "lname": "Ueno"}', '{"fname": "Stephanie", "lname": "Weirich"}', '{"fname": "Amal", "lname": "Ahmed"}', '{"fname": "Ralf", "lname": "Hinze"}', '{"fname": "Atsushi", "lname": "Ohori"}', '{"fname": "Aaron", "lname": "Turon"}', '{"fname": "Tim", "lname": "Sheard"}']

--------------------------10-----------------
schema:['fname', 'lname']
---------------------------Execute SQL Query:SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Google"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": { "from": "authorship", "localField": "authid", "foreignField": "authid", "as": "t2" } },
    { "$unwind": "$t2" },
    { "$lookup": { "from": "inst", "localField": "t2.instid", "foreignField": "instid", "as": "t3" } },
    { "$unwind": "$t3" },
    { "$match": { "t3.name": "Google" } },
    { "$group": { "_id": { "fname": "$fname", "lname": "$lname" } } },
    { "$project": { "fname": "$_id.fname", "lname": "$_id.lname", "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"fname": "Matthias", "lname": "Blume"}']
target res: ['{"fname": "Matthias", "lname": "Blume"}', '{"fname": "Daniel W. H.", "lname": "James"}', '{"fname": "Atsushi", "lname": "Ohori"}', '{"fname": "Aaron", "lname": "Turon"}', '{"fname": "Amal", "lname": "Ahmed"}', '{"fname": "Ralf", "lname": "Hinze"}', '{"fname": "Brent", "lname": "Yorgey"}', '{"fname": "Stephanie", "lname": "Weirich"}', '{"fname": "Tim", "lname": "Sheard"}', '{"fname": "Katsuhiro", "lname": "Ueno"}', '{"fname": "Olin", "lname": "Shivers"}', '{"fname": "Jeremy", "lname": "Gibbons"}', '{"fname": "Nicolas", "lname": "Pouillard"}']

--------------------------11-----------------
schema:['lname']
---------------------------Execute SQL Query:SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  "Binders Unbound"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": {
        "from": "authorship",
        "localField": "authid",
        "foreignField": "authid",
        "as": "t2"
    }},
    { "$unwind": "$t2" },
    { "$lookup": {
        "from": "papers",
        "localField": "t2.paperid",
        "foreignField": "paperid",
        "as": "t3"
    }},
    { "$unwind": "$t3" },
    { "$match": { "t3_title": "Binders Unbound" } },
    { "$project": { "lname": 1, "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"lname": "Weirich"}', '{"lname": "Yorgey"}', '{"lname": "Sheard"}']
target res: []

--------------------------12-----------------
schema:['fname', 'lname']
---------------------------Execute SQL Query:SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  "Nameless ,  Painless"-----------------
---------------------------Execute Target Query:MongoDB Query: db.authors.aggregate([ { "$lookup": { "from": "authorship", "localField": "authid", "foreignField": "authid", "as": "t2" } }, { "$unwind": "$t2" }, { "$lookup": { "from": "papers", "localField": "t2.paperid", "foreignField": "paperid", "as": "t3" } }, { "$unwind": "$t3" }, { "$match": { "t3.title": "Nameless ,  Painless" } }, { "$project": { "fname": 1, "lname": 1, "_id": 0 } } ])-----------------
execute target query error:invalid syntax (<string>, line 1)

--------------------------13-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Indiana University"-----------------
---------------------------Execute Target Query:db.papers.aggregate([ { "$lookup": { "from": "authorship", "localField": "paperid", "foreignField": "paperid", "as": "t2" } }, { "$unwind": "$t2" }, { "$lookup": { "from": "inst", "localField": "t2.instid", "foreignField": "instid", "as": "t3" } }, { "$unwind": "$t3" }, { "$match": { "t3.name": "Indiana University" } }, { "$group": { "_id": "$title" } }, { "$project": { "title": "$_id", "_id": 0 } } ])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}']
target res: ['{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}']

--------------------------14-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Google"-----------------
---------------------------Execute Target Query:db.papers.aggregate([
    { "$lookup": { "from": "authorship", "localField": "paperid", "foreignField": "paperid", "as": "t2" } },
    { "$unwind": "$t2" },
    { "$lookup": { "from": "inst", "localField": "t2.instid", "foreignField": "instid", "as": "t3" } },
    { "$unwind": "$t3" },
    { "$match": { "t3.name": "Google" } },
    { "$group": { "_id": "$title" } },
    { "$project": { "title": "$_id", "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}']
target res: ['{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}']

--------------------------15-----------------
schema:['count_DISTINCT t1_title']
---------------------------Execute SQL Query:SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Tokohu University"-----------------
---------------------------Execute Target Query:MongoDB Query: db.papers.aggregate([ { "$lookup": { "from": "authorship", "localField": "paperid", "foreignField": "paperid", "as": "t2" } }, { "$unwind": "$t2" }, { "$lookup": { "from": "inst", "localField": "t2.instid", "foreignField": "instid", "as": "t3" } }, { "$unwind": "$t3" }, { "$match": { "t3.name": "Tokohu University" } }, { "$group": { "_id": null, "count_distinct_t1_title": { "$addToSet": "$title" } } }, { "$project": { "count_distinct_t1_title": { "$size": "$count_distinct_t1_title" }, "_id": 0 } } ])-----------------
execute target query error:invalid syntax (<string>, line 1)

--------------------------16-----------------
schema:['count_DISTINCT t1_title']
---------------------------Execute SQL Query:SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "University of Pennsylvania"-----------------
---------------------------Execute Target Query:MongoDB Query: db.papers.aggregate([ { "$lookup": { "from": "authorship", "localField": "paperid", "foreignField": "paperid", "as": "t2" } }, { "$unwind": "$t2" }, { "$lookup": { "from": "inst", "localField": "t2.instid", "foreignField": "instid", "as": "t3" } }, { "$unwind": "$t3" }, { "$match": { "t3.name": "University of Pennsylvania" } }, { "$group": { "_id": null, "count_distinct_t1_title": { "$addToSet": "$title" } } }, { "$project": { "count_distinct_t1_title": { "$size": "$count_distinct_t1_title" }, "_id": 0 } } ])-----------------
execute target query error:invalid syntax (<string>, line 1)

--------------------------17-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  "Olin" AND t1.lname  =  "Shivers"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$match": { "fname": "Olin", "lname": "Shivers" } },
    { "$lookup": {
        "from": "authorship",
        "localField": "authid",
        "foreignField": "authid",
        "as": "authorship"
    }},
    { "$unwind": "$authorship" },
    { "$lookup": {
        "from": "papers",
        "localField": "authorship.paperid",
        "foreignField": "paperid",
        "as": "papers"
    }},
    { "$unwind": "$papers" },
    { "$project": { "title": "$papers.title", "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"title": "Functional Pearl: Modular Rollback through Control Logging"}']
target res: ['{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}']

--------------------------18-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  "Stephanie" AND t1.lname  =  "Weirich"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$match": { "fname": "Stephanie", "lname": "Weirich" } },
    { "$lookup": {
        "from": "authorship",
        "localField": "authid",
        "foreignField": "authid",
        "as": "authorship"
    }},
    { "$unwind": "$authorship" },
    { "$lookup": {
        "from": "papers",
        "localField": "authorship.paperid",
        "foreignField": "paperid",
        "as": "papers"
    }},
    { "$unwind": "$papers" },
    { "$project": { "title": "$papers.title", "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"title": "Binders Unbound"}']
target res: ['{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}', '{"title": "Just do it: Simple Monadic Equational Reasoning"}', '{"title": "Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory"}', '{"title": "Functional Pearl: Modular Rollback through Control Logging"}', '{"title": "An Equivalence-Preserving CPS Translation via Multi-Language Semantics"}', '{"title": "Making Standard ML a Practical Database Programming Language"}', '{"title": "Nameless, Painless"}', '{"title": "Binders Unbound"}']

--------------------------19-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  "USA" AND t2.authorder  =  2 AND t1.lname  =  "Turon"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": { "from": "authorship", "localField": "authid", "foreignField": "authid", "as": "authorship" } },
    { "$unwind": "$authorship" },
    { "$lookup": { "from": "papers", "localField": "authorship.paperid", "foreignField": "paperid", "as": "papers" } },
    { "$unwind": "$papers" },
    { "$lookup": { "from": "inst", "localField": "authorship.instid", "foreignField": "instid", "as": "inst" } },
    { "$unwind": "$inst" },
    { "$match": { "inst.country": "USA", "authorship.authorder": 2, "lname": "Turon" } },
    { "$project": { "title": "$papers.title", "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"title": "Functional Pearl: Modular Rollback through Control Logging"}']
target res: []

--------------------------20-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid JOIN inst AS t4 ON t2.instid  =  t4.instid WHERE t4.country  =  "Japan" AND t2.authorder  =  1 AND t1.lname  =  "Ohori"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": { "from": "authorship", "localField": "authid", "foreignField": "authid", "as": "t2" } },
    { "$unwind": "$t2" },
    { "$lookup": { "from": "papers", "localField": "t2.paperid", "foreignField": "paperid", "as": "t3" } },
    { "$unwind": "$t3" },
    { "$lookup": { "from": "inst", "localField": "t2.instid", "foreignField": "instid", "as": "t4" } },
    { "$unwind": "$t4" },
    { "$match": { "t4.country": "Japan", "t2.authorder": 1, "lname": "Ohori" } },
    { "$project": { "title": "$t3.title", "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"title": "Making Standard ML a Practical Database Programming Language"}']
target res: []

--------------------------21-----------------
schema:['lname']
---------------------------Execute SQL Query:SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.fname ,  t1.lname ORDER BY count(*) DESC LIMIT 1-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": { "from": "authorship", "localField": "authid", "foreignField": "authid", "as": "t2" } },
    { "$unwind": "$t2" },
    { "$lookup": { "from": "papers", "localField": "t2.paperid", "foreignField": "paperid", "as": "t3" } },
    { "$unwind": "$t3" },
    { "$group": { "_id": { "fname": "$fname", "lname": "$lname" }, "count": { "$sum": 1 } } },
    { "$sort": { "count": -1 } },
    { "$limit": 1 },
    { "$project": { "lname": "$_id.lname", "_id": 0 } }
])-----------------
mismatch between MySQL and target
mysql res: ['{"lname": "Hinze"}']
target res: ['{"lname": "Blume"}']

--------------------------22-----------------
schema:['country']
---------------------------Execute SQL Query:SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1-----------------
---------------------------Execute Target Query:MongoDB Query: db.inst.aggregate([ { "$lookup": { "from": "authorship", "localField": "instid", "foreignField": "instid", "as": "t2" } }, { "$unwind": "$t2" }, { "$lookup": { "from": "papers", "localField": "t2.paperid", "foreignField": "paperid", "as": "t3" } }, { "$unwind": "$t3" }, { "$group": { "_id": "$country", "count": { "$sum": 1 } } }, { "$sort": { "count": -1 } }, { "$limit": 1 }, { "$project": { "country": "$_id", "_id": 0 } } ])-----------------
execute target query error:invalid syntax (<string>, line 1)

--------------------------23-----------------
schema:['name']
---------------------------Execute SQL Query:SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1-----------------
---------------------------Execute Target Query:MongoDB Query: db.inst.aggregate([ { "$lookup": { "from": "authorship", "localField": "instid", "foreignField": "instid", "as": "t2" } }, { "$unwind": "$t2" }, { "$lookup": { "from": "papers", "localField": "t2.paperid", "foreignField": "paperid", "as": "t3" } }, { "$unwind": "$t3" }, { "$group": { "_id": "$name", "count": { "$sum": 1 } } }, { "$sort": { "count": -1 } }, { "$limit": 1 }, { "$project": { "name": "$_id", "_id": 0 } } ])-----------------
execute target query error:invalid syntax (<string>, line 1)

--------------------------24-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT title FROM papers WHERE title LIKE "%ML%"-----------------
---------------------------Execute Target Query:db.papers.find({ "title": { "$regex": "ML", "$options": "i" } }, { "title": 1, "_id": 0 })-----------------
translate SELECT title FROM papers WHERE title LIKE "%ML%" success

--------------------------25-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT title FROM papers WHERE title LIKE "%Database%"-----------------
---------------------------Execute Target Query:MongoDB Query: db.papers.find({ "title": { "$regex": "Database", "$options": "i" } }, { "title": 1, "_id": 0 })-----------------
execute target query error:invalid syntax (<string>, line 1)

--------------------------26-----------------
schema:['fname']
---------------------------Execute SQL Query:SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Functional%"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": {
        "from": "authorship",
        "localField": "authid",
        "foreignField": "authid",
        "as": "t2"
    }},
    { "$unwind": "$t2" },
    { "$lookup": {
        "from": "papers",
        "localField": "t2.paperid",
        "foreignField": "paperid",
        "as": "t3"
    }},
    { "$unwind": "$t3" },
    { "$match": { "t3.title": { "$regex": "Functional", "$options": "i" } } },
    { "$project": { "fname": 1, "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"fname": "Olin"}', '{"fname": "Aaron"}']
target res: ['{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Jeremy"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Ralf"}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Daniel W. H."}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Olin"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Aaron"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Amal"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Matthias"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Atsushi"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Katsuhiro"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Nicolas"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Stephanie"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Brent"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}', '{"fname": "Tim"}']

--------------------------27-----------------
schema:['lname']
---------------------------Execute SQL Query:SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE "%Monadic%"-----------------
---------------------------Execute Target Query:db.authors.aggregate([
    { "$lookup": {
        "from": "authorship",
        "localField": "authid",
        "foreignField": "authid",
        "as": "t2"
    }},
    { "$unwind": "$t2" },
    { "$lookup": {
        "from": "papers",
        "localField": "t2.paperid",
        "foreignField": "paperid",
        "as": "t3"
    }},
    { "$unwind": "$t3" },
    { "$match": { "t3.title": { "$regex": "Monadic", "$options": "i" } } },
    { "$project": { "lname": 1, "_id": 0 } }
])-----------------
Exception raised during comparison: Row number mismatch
mysql res: ['{"lname": "Gibbons"}', '{"lname": "Hinze"}']
target res: ['{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Gibbons"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "Hinze"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "James"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Shivers"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Turon"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Ahmed"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Blume"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ohori"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Ueno"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Pouillard"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Weirich"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Yorgey"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}', '{"lname": "Sheard"}']

--------------------------28-----------------
schema:['title']
---------------------------Execute SQL Query:SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)-----------------
---------------------------Execute Target Query:MongoDB Query: db.authorship.aggregate([
    { "$lookup": {
        "from": "papers",
        "localField": "paperid",
        "foreignField": "paperid",
        "as": "papers"
    }},
    { "$unwind": "$papers" },
    { "$group": {
        "_id": null,
        "max_authorder": { "$max": "$authorder" }
    }},
    { "$lookup": {
        "from": "authorship",
        "pipeline": [
            { "$match": {
                "authorder": "$max_authorder"
            }},
            { "$lookup": {
                "from": "papers",
                "localField": "paperid",
                "foreignField": "paperid",
                "as": "papers"
            }},
            { "$unwind": "$papers" },
            { "$project": {
                "title": "$papers.title",
                "_id": 0
            }}
        ],
        "as": "max_authorder_papers"
    }},
    { "$unwind": "$max_authorder_papers" },
    { "$replaceRoot": { "newRoot": "$max_authorder_papers" }}
])-----------------
execute target query error:invalid syntax (<string>, line 1)

--------------------------29-----------------
schema:['fname']
---------------------------Execute SQL Query:SELECT fname FROM authors WHERE lname  =  "Ueno"-----------------
---------------------------Execute Target Query:db.authors.find({ "lname": "Ueno" }, { "fname": 1, "_id": 0 })-----------------
translate SELECT fname FROM authors WHERE lname  =  "Ueno" success

--------------------------30-----------------
schema:['lname']
---------------------------Execute SQL Query:SELECT lname FROM authors WHERE fname  =  "Amal"-----------------
---------------------------Execute Target Query:db.authors.find({ "fname": "Amal" }, { "lname": 1, "_id": 0 })-----------------
translate SELECT lname FROM authors WHERE fname  =  "Amal" success

--------------------------31-----------------
schema:['fname']
---------------------------Execute SQL Query:SELECT fname FROM authors ORDER BY fname-----------------
---------------------------Execute Target Query:db.authors.find({}, { "fname": 1, "_id": 0 }).sort({ "fname": 1 })-----------------
translate SELECT fname FROM authors ORDER BY fname success

--------------------------32-----------------
schema:['lname']
---------------------------Execute SQL Query:SELECT lname FROM authors ORDER BY lname-----------------
---------------------------Execute Target Query:db.authors.find({}, { "lname": 1, "_id": 0 }).sort({ "lname": 1 })-----------------
translate SELECT lname FROM authors ORDER BY lname success

--------------------------33-----------------
schema:['fname', 'lname']
---------------------------Execute SQL Query:SELECT fname ,  lname FROM authors ORDER BY lname-----------------
---------------------------Execute Target Query:db.authors.find({}, { "fname": 1, "lname": 1, "_id": 0 }).sort({ "lname": 1 })-----------------
translate SELECT fname ,  lname FROM authors ORDER BY lname success
success_query_count: 6
valid_count: 33
accuracy: 0.18181818181818182
