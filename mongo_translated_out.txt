**********************SQL Query: SELECT date FROM weather WHERE max_temperature_f  >  85**************************
**********************MongoDB Query: db.weather.find({ "max_temperature_f": { "$gt": 85 } },{ "date": 1, "_id": 0 })**************************
**********************SQL Query: SELECT name FROM station WHERE lat  <  37.5**************************
Error parsing XML of prompt: not well-formed (invalid token): line 12, column 42
**********************MongoDB Query: db.station.find({ "lat": { "$lt": 37.5 } },{ "name": 1, "_id": 0 })**************************
**********************SQL Query: SELECT city ,  max(lat) FROM station GROUP BY city**************************
**********************MongoDB Query: db.station.aggregate([{"$group": {"_id": "$city", "max_lat": {"$max": "$lat"}}}])**************************
**********************SQL Query: SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3**************************
**********************MongoDB Query: db.trip.find({}, { "start_station_name": 1, "end_station_name": 1, "_id": 0 }).sort({ "id": 1 }).limit(3)**************************
**********************SQL Query: SELECT avg(lat) ,  avg(longitude) FROM station WHERE city  =  "San Jose"**************************
**********************MongoDB Query: db.station.aggregate([{"$match": {"city": "San Jose"}}, {"$group": {"_id": None, "avg_lat": {"$avg": "$lat"}, "avg_longitude": {"$avg": "$longitude"}}}])**************************
**********************SQL Query: SELECT id FROM trip ORDER BY duration LIMIT 1**************************
**********************MongoDB Query: db.trip.find({}, {"id": 1, "_id": 0}).sort({"duration": 1}).limit(1)**************************
**********************SQL Query: SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636**************************
**********************MongoDB Query: db.trip.find({"bike_id": 636}, {"duration": 1, "_id": 0}).toArray()**************************
**********************SQL Query: SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE "8/%" GROUP BY zip_code**************************
**********************MongoDB Query: db.weather.aggregate([{"$match": {"date": {"$regex": "^8/"} }}, {"$group": {"_id": "$zip_code", "avg_mean_temperature_f": {"$avg": "$mean_temperature_f"}}}])**************************
**********************SQL Query: SELECT count(DISTINCT bike_id) FROM trip**************************
**********************MongoDB Query: db.trip.distinct("bike_id").length**************************
**********************SQL Query: SELECT count(DISTINCT city) FROM station**************************
**********************MongoDB Query: db.station.distinct("city").length**************************
**********************SQL Query: SELECT COUNT(*) FROM station WHERE city  =  "Mountain View"**************************
**********************MongoDB Query: db.station.find({"city": "Mountain View"}).count()**************************
**********************SQL Query: SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status"}}, {"$unwind": "$status"}, {"$match": {"status.bikes_available": 7}}, {"$project": {"_id": 0, "name": "$name"}}])**************************
**********************SQL Query: SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE "8/%" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1**************************
**********************MongoDB Query: db.trip.aggregate([{"$match": {"start_date": {"$regex": "^8/"} }}, {"$group": {"_id": "$start_station_name", "start_station_id": {"$first": "$start_station_id"}, "count": {"$sum": 1} }}, {"$sort": {"count": -1}}, {"$limit": 1}])**************************
**********************SQL Query: SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1**************************
**********************MongoDB Query: db.trip.aggregate([{"$match": {"zip_code": 94002}}, {"$group": {"_id": "$bike_id", "count": {"$sum": 1}}, {"$sort": {"count": -1}}, {"$limit": 1}])**************************
**********************SQL Query: SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8**************************
**********************MongoDB Query: db.weather.find({ "mean_humidity": { "$gt": 50 }, "mean_visibility_miles": { "$gt": 8 } }).count()**************************
**********************SQL Query: SELECT T1.lat ,  T1.longitude ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "trip", "localField": "id", "foreignField": "start_station_id", "as": "trips"}}, {"$unwind": "$trips"}, {"$sort": {"trips.duration": 1}}, {"$limit": 1}, {"$project": {"lat": "$lat", "longitude": "$longitude", "city": "$city", "_id": 0}}])**************************
**********************SQL Query: SELECT id FROM station WHERE city  =  "San Francisco" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10**************************
**********************MongoDB Query: db.station.find({ "city": "San Francisco", "id": { "$in": db.status.aggregate([{"$group": {"_id": "$station_id", "avg_bikes_available": {"$avg": "$bikes_available"}}}, {"$match": {"avg_bikes_available": {"$gt": 10}}}], {allowDiskUse: true}).map(function(item) { return item._id; }) }) })**************************
**********************SQL Query: SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE "12/%"**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status_info"}}, {"$unwind": "$status_info"}, {"$group": {"_id": "$status_info.station_id", "avg_bikes_available": {"$avg": "$status_info.bikes_available"}, "name": {"$first": "$name"}, "id": {"$first": "$id"}}, {"$match": {"avg_bikes_available": {"$gt": 14}}}, {"$project": {"name": 1, "id": 1}}, {"$limit": 10}, {"$unionWith": {"coll": "station", "pipeline": [{"$match": {"installation_date": {"$regex": "^12/"}}}, {"$project": {"name": 1, "id": 1}}]}])**************************
**********************SQL Query: SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3**************************
**********************MongoDB Query: db.weather.aggregate([{"$match": {"zip_code": 94107}}, {"$group": {"_id": "$cloud_cover", "count": {"$sum": 1}}, {"$sort": {"count": -1}}, {"$limit": 3}])**************************
**********************SQL Query: SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1**************************
**********************MongoDB Query: db.weather.aggregate([{"$group": {"_id": "$zip_code", "avg_mean_sea_level_pressure_inches": {"$avg": "$mean_sea_level_pressure_inches"}}}, {"$sort": {"avg_mean_sea_level_pressure_inches": 1}}, {"$limit": 1}])**************************
**********************SQL Query: SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  "Palo Alto")**************************
**********************MongoDB Query: db.status.aggregate([{"$lookup": {"from": "station", "localField": "station_id", "foreignField": "id", "as": "station_info"}}, {"$match": {"station_info.city": {"$ne": "Palo Alto"}}}, {"$group": {"_id": None, "avg_bikes_available": {"$avg": "$bikes_available"}}}])**************************
**********************SQL Query: SELECT avg(longitude) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status"}}, {"$unwind": "$status"}, {"$group": {"_id": "$id", "avg_longitude": {"$avg": "$longitude"}, "max_bikes_available": {"$max": "$status.bikes_available"}}}, {"$match": {"max_bikes_available": {"$lte": 10}}}, {"$group": {"_id": None, "avg_longitude": {"$avg": "$avg_longitude"}}}])**************************
**********************SQL Query: SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80**************************
**********************MongoDB Query: db.weather.find({ "max_temperature_f": { "$gte": 80 } },{ "date": 1, "zip_code": 1, "_id": 0 })**************************
**********************SQL Query: SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60**************************
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "weather", "localField": "zip_code", "foreignField": "zip_code", "as": "weather"}}, {"$unwind": "$weather"}, {"$group": {"_id": "$weather.zip_code", "avg_mean_temperature_f": {"$avg": "$weather.mean_temperature_f"}, "ids": {"$addToSet": "$id"}}}, {"$match": {"avg_mean_temperature_f": {"$gt": 60}}}, {"$unwind": "$ids"}, {"$project": {"_id": 0, "id": "$ids"}}])**************************
**********************SQL Query: SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code**************************
**********************MongoDB Query: db.weather.aggregate([{"$match": {"max_wind_Speed_mph": {"$gte": 25}}}, {"$group": {"_id": "$zip_code", "count": {"$sum": 1}}})**************************
**********************SQL Query: SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)**************************
Error parsing XML of prompt: not well-formed (invalid token): line 12, column 66
**********************MongoDB Query: db.weather.find({"min_dew_point_f": {"$lt": db.weather.find({"zip_code": 94107}).min("min_dew_point_f")}}, {"date": 1, "zip_code": 1, "_id": 0})**************************
**********************SQL Query: SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id**************************
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "station", "localField": "end_station_id", "foreignField": "id", "as": "station_info"}}, {"$unwind": "$station_info"}, {"$project": {"_id": 0, "id": "$_id", "installation_date": "$station_info.installation_date"}}])**************************
**********************SQL Query: SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1**************************
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "station", "localField": "start_station_id", "foreignField": "id", "as": "station"}}, {"$unwind": "$station"}, {"$sort": {"station.dock_count": -1}}, {"$limit": 1}, {"$project": {"_id": 0, "id": "$id"}}])**************************
**********************SQL Query: SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  "San Francisco"**************************
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "station", "localField": "end_station_id", "foreignField": "id", "as": "station"}}, {"$match": {"station.city": {"$ne": "San Francisco"}}}, {"$count": "total"}])**************************
**********************SQL Query: SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != "San Francisco"**************************
**********************MongoDB Query: db.trip.aggregate([{"$lookup": {"from": "station", "localField": "end_station_id", "foreignField": "id", "as": "station"}}, {"$match": {"station.city": {"$ne": "San Francisco"}}}, {"$count": "total"}])**************************
**********************SQL Query: SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != "Fog" AND EVENTS != "Rain"**************************
**********************MongoDB Query: db.weather.find({ "zip_code": 94107, "EVENTS": { "$nin": ["Fog", "Rain"] } },{ "date": 1, "_id": 0 })**************************
**********************SQL Query: SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7**************************
Error parsing XML of prompt: not well-formed (invalid token): line 12, column 134
**********************MongoDB Query: db.station.find({ "lat": { "$gt": 37.4 }, "id": { "$nin": db.status.find({}).sort({ "bikes_available": 1 }).limit(1).map(function(u) { return u.station_id }) } }, { "id": 1, "_id": 0 })**************************
**********************SQL Query: SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  "San Jose"**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status"}}, {"$unwind": "$status"}, {"$group": {"_id": "$status.station_id", "avg_bikes_available": {"$avg": "$status.bikes_available"}, "name": {"$first": "$name"} }}, {"$match": {"avg_bikes_available": {"$gt": 10}}}, {"$lookup": {"from": "station", "localField": "_id", "foreignField": "id", "as": "station"}}, {"$match": {"station.city": {"$ne": "San Jose"}}}, {"$project": {"name": 1, "_id": 0}}])**************************
**********************SQL Query: SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1**************************
**********************MongoDB Query: db.station.find({}, { "name": 1, "lat": 1, "city": 1, "_id": 0 }).sort({ "lat": 1 }).limit(1)**************************
**********************SQL Query: SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3**************************
**********************MongoDB Query: db.weather.find({}, { "date": 1, "mean_temperature_f": 1, "mean_humidity": 1, "_id": 0 }).sort({ "max_gust_speed_mph": -1 }).limit(3)**************************
**********************SQL Query: SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15**************************
**********************MongoDB Query: db.station.aggregate([{"$group": {"_id": "$city", "count": {"$sum": 1}}}, {"$match": {"count": {"$gte": 15}}}])**************************
**********************SQL Query: SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200**************************
**********************MongoDB Query: db.trip.aggregate([{"$group": {"_id": "$start_station_name", "start_station_id": {"$first": "$start_station_id"}, "count": {"$sum": 1}}}, {"$match": {"count": {"$gte": 200}}}, {"$project": {"_id": 0, "start_station_id": 1, "start_station_name": "$_id"}}])**************************
**********************SQL Query: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10**************************
Error parsing XML of prompt: not well-formed (invalid token): line 12, column 88
**********************MongoDB Query: db.weather.aggregate([{"$group": {"_id": "$zip_code", "avg_mean_visibility_miles": {"$avg": "$mean_visibility_miles"}}}, {"$match": {"avg_mean_visibility_miles": {"$lt": 10}}}])**************************
**********************SQL Query: SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC**************************
**********************MongoDB Query: db.station.aggregate([{"$group": {"_id": "$city"}}, {"$sort": {"max_lat": -1}}])**************************
**********************SQL Query: SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5**************************
**********************MongoDB Query: db.weather.find({}, { "date": 1, "cloud_cover": 1, "_id": 0 }).sort({ "cloud_cover": -1 }).limit(5)**************************
**********************SQL Query: SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3**************************
**********************MongoDB Query: db.trip.find({}, {"id": 1, "duration": 1, "_id": 0}).sort({"duration": -1}).limit(3)**************************
**********************SQL Query: SELECT T1.name ,  T1.longitude ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "trip", "localField": "id", "foreignField": "start_station_id", "as": "trips"}}, {"$unwind": "$trips"}, {"$group": {"_id": "$trips.start_station_id", "name": {"$first": "$name"}, "longitude": {"$first": "$longitude"}, "avg_duration": {"$avg": "$trips.duration"}}}])**************************
**********************SQL Query: SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "trip", "localField": "id", "foreignField": "end_station_id", "as": "trip_data"}}, {"$unwind": "$trip_data"}, {"$group": {"_id": "$trip_data.end_station_id", "name": {"$first": "$name"}, "lat": {"$first": "$lat"}, "min_duration": {"$min": "$trip_data.duration"}}}])**************************
**********************SQL Query: SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100**************************
Error parsing XML of prompt: not well-formed (invalid token): line 12, column 67
**********************MongoDB Query: db.trip.distinct("start_station_name", { "duration": { "$lt": 100 } })**************************
**********************SQL Query: SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70**************************
**********************MongoDB Query: db.weather.distinct("zip_code", { "max_dew_point_f": { "$lt": 70 } })**************************
**********************SQL Query: SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)**************************
**********************MongoDB Query: db.trip.find({ "duration": { "$gte": db.trip.aggregate([{"$match": {"zip_code": 94103}}, {"$group": {"_id": None, "avg_duration": {"$avg": "$duration"}}}])[0].avg_duration } },{ "id": 1, "_id": 0 })**************************
**********************SQL Query: SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31**************************
**********************MongoDB Query: db.weather.find({ "mean_sea_level_pressure_inches": { "$gte": 30.3, "$lte": 31 } },{ "date": 1, "_id": 0 })**************************
**********************SQL Query: SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1**************************
**********************MongoDB Query: db.weather.aggregate([{"$project": {"date": 1, "temperature_diff": {"$subtract": ["$max_temperature_f", "$min_temperature_f"]}}}, {"$sort": {"temperature_diff": 1}}, {"$limit": 1}])**************************
**********************SQL Query: SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "status", "localField": "id", "foreignField": "station_id", "as": "status"}}, {"$unwind": "$status"}, {"$match": {"status.bikes_available": {"$gt": 12}}}, {"$project": {"id": "$id", "name": "$name", "_id": 0}}])**************************
**********************SQL Query: SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100**************************
Error parsing XML of prompt: not well-formed (invalid token): line 12, column 80
**********************MongoDB Query: db.weather.aggregate([{"$group": {"_id": "$zip_code", "avg_mean_humidity": {"$avg": "$mean_humidity"}}}, {"$match": {"avg_mean_humidity": {"$lt": 70}}}, {"$lookup": {"from": "trip", "localField": "_id", "foreignField": "zip_code", "as": "trip_data"}}, {"$unwind": "$trip_data"}, {"$group": {"_id": "$_id", "count": {"$sum": 1}}}, {"$match": {"count": {"$gte": 100}}}, {"$project": {"_id": 1}}])**************************
**********************SQL Query: SELECT name FROM station WHERE city  =  "Palo Alto" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100**************************
**********************MongoDB Query: db.station.find({ "city": "Palo Alto", "name": { "$nin": db.trip.aggregate([{"$group": {"_id": "$end_station_name", "count": {"$sum": 1}}}, {"$match": {"count": {"$gt": 100}}}], { "_id": 0 }).map(function(item) { return item._id; }) } })**************************
**********************SQL Query: SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  "Mountain View" AND T3.city  =  "Palo Alto"**************************
**********************MongoDB Query: db.station.aggregate([
    {
        "$match": { "city": "Mountain View" }
    },
    {
        "$lookup": {
            "from": "trip",
            "localField": "id",
            "foreignField": "start_station_id",
            "as": "T2"
        }
    },
    {
        "$unwind": "$T2"
    },
    {
        "$lookup": {
            "from": "station",
            "localField": "T2.id",
            "foreignField": "id",
            "as": "T3"
        }
    },
    {
        "$unwind": "$T3"
    },
    {
        "$match": { "T3.city": "Palo Alto" }
    },
    {
        "$lookup": {
            "from": "trip",
            "localField": "T3.id",
            "foreignField": "end_station_id",
            "as": "T4"
        }
    },
    {
        "$count": "total"
    }
])**************************
**********************SQL Query: SELECT avg(T1.lat) ,  avg(T1.longitude) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id**************************
**********************MongoDB Query: db.station.aggregate([{"$lookup": {"from": "trip", "localField": "id", "foreignField": "start_station_id", "as": "trip_data"}}, {"$unwind": "$trip_data"}, {"$group": {"_id": null, "avg_lat": {"$avg": "$lat"}, "avg_longitude": {"$avg": "$longitude"}}}])**************************